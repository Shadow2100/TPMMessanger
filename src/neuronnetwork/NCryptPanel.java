package neuronnetwork;

import neuronnetwork.coder.Crypto;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import messages.Message;
import messages.MessageConfig;
import messages.MessageInputVector;
import messages.MessageOutput;
import messages.MessageUpdateWeightsAndSynchronizationCheck;
import messages.MessageSynchronizationCheckReady;
import treeparitymachinesalgorithm.InputVector;
import treeparitymachinesalgorithm.TPM;

/**
 *
 * @author Vova
 */
public class NCryptPanel extends javax.swing.JFrame {

    /**
     * Creates new form NCryptPanel
     */
    public NCryptPanel() {
        //initialize the gui made by Netbeans
        initComponents();

        plainTextField.setColumns(20);
        plainTextField.setRows(3);
        plainTextField.setWrapStyleWord(true);
        plainTextField.setLineWrap(true);

        encryptedTextField.setColumns(20);
        encryptedTextField.setRows(3);
        encryptedTextField.setWrapStyleWord(true);
        encryptedTextField.setLineWrap(true);

        decryptedTextField.setColumns(20);
        decryptedTextField.setRows(3);
        decryptedTextField.setWrapStyleWord(true);
        decryptedTextField.setLineWrap(true);

        btnServerStart.setEnabled(false);
        btnDisConnect.setEnabled(false);
        jButtonSend.setEnabled(false);
        keyField.setEditable(true);
        syncBar.setStringPainted(true);
        syncBar.setMaximum(100);
        syncBar.setMinimum(0);
        tpmImage1 = new JLabel(new ImageIcon("TreeParityMachine.jpg"));
        jPanel1.add(tpmImage1);

        //set the icon for the application
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("logo16x16.png"));

        //set system look and feel to show as native application
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            //doesnot matter if exception occur. The default is java look and feel
        }

        //set initial status 
        statusLabel.setText("Сеть не инициализирована");

        //make this JFrame visible
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnServerStart = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        keyField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextField = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        btnEncrypt = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        encryptedTextField = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        decryptedTextField = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        btnDecrypt = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        syncMessageLabel = new javax.swing.JLabel();
        syncBar = new javax.swing.JProgressBar();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        ipField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        btnDisConnect = new javax.swing.JButton();
        jButtonSend = new javax.swing.JButton();
        nField = new javax.swing.JFormattedTextField();
        kField = new javax.swing.JFormattedTextField();
        lField = new javax.swing.JFormattedTextField();
        serverPortField = new javax.swing.JFormattedTextField();
        portField = new javax.swing.JFormattedTextField();
        jSeparator3 = new javax.swing.JSeparator();

        jScrollPane4.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tree Parity Machines Messenger");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setName("MainFrame"); // NOI18N
        setResizable(false);

        jLabel1.setText("Параметры алгоритма Tree Parity Machine");

        jLabel2.setText("Количество входным нейронов (N)");

        jLabel3.setText("Количество скрытых нейронов (K)");

        jLabel4.setText("Диапазон значений весов          (L)");

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 200));

        btnStart.setText("Создать сеть");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnServerStart.setText("Запустить сервер");
        btnServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServerStartActionPerformed(evt);
            }
        });

        jLabel5.setText("Ключ");

        jLabel6.setText("Текст");

        plainTextField.setColumns(20);
        plainTextField.setRows(5);
        jScrollPane1.setViewportView(plainTextField);

        jLabel7.setText("Способ шифрования");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AES/CBC/PKCS5Padding", "DESede/CBC/PKCS5Padding", "Blowfish/CBC/PKCS5Padding" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        btnEncrypt.setText("Зашифровать");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        jLabel8.setText("Зашифрованный текст");

        encryptedTextField.setColumns(20);
        encryptedTextField.setRows(5);
        jScrollPane2.setViewportView(encryptedTextField);

        jLabel9.setText("Расшифрованный текст");

        decryptedTextField.setColumns(20);
        decryptedTextField.setRows(5);
        jScrollPane3.setViewportView(decryptedTextField);

        jLabel10.setText("Способ расшифрования");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AES/CBC/PKCS5Padding", "DESede/CBC/PKCS5Padding", "Blowfish/CBC/PKCS5Padding" }));

        btnDecrypt.setText("Расшифровать");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnReset.setText("Сбросить");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel11.setText("Порт");

        jLabel12.setText("Ip адрес сервера");

        ipField.setText("127.0.0.1");
        ipField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipFieldActionPerformed(evt);
            }
        });

        jLabel13.setText("Порт сервера");

        btnConnect.setLabel("Подключиться");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisConnect.setText("Отключиться");
        btnDisConnect.setActionCommand("Остановить");
        btnDisConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisConnectActionPerformed(evt);
            }
        });

        jButtonSend.setText("Отправить");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        nField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        nField.setText("12");

        kField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        kField.setText("8");

        lField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        lField.setText("7");

        serverPortField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        serverPortField.setText("8080");
        serverPortField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverPortFieldActionPerformed(evt);
            }
        });

        portField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        portField.setText("8080");
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(syncMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(syncBar, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(btnEncrypt))
                            .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(btnDecrypt))
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ipField, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(portField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDisConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel11))
                                    .addGap(21, 21, 21)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                            .addComponent(kField)
                                            .addComponent(lField))
                                        .addComponent(serverPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(47, 47, 47)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnServerStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(0, 0, 0)
                                    .addComponent(btnReset)))
                            .addComponent(jSeparator3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(btnServerStart, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(kField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(serverPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(btnDisConnect)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 38, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(syncBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(btnDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syncMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //this method is called when Start button is clicked
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        this.init();
        btnStart.setEnabled(false);
        btnServerStart.setEnabled(true);
        btnConnect.setEnabled(false);
        btnDisConnect.setEnabled(false);
    }//GEN-LAST:event_btnStartActionPerformed

    //this method is called when Encrypt button is clicked
    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        try {
            String plainText = plainTextField.getText();
            if (plainText.equals("")) {
                JOptionPane.showMessageDialog(this, "Введите текст в поле", "Ошибка", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            String cryptType = (String) jComboBox1.getSelectedItem();
            if (cryptType.equals("Tripple Des")) {
                cryptType = "DESede";
            }
            String encrypt = Crypto.encrypt(cryptType, plainText, keyField.getText());
            encryptedTextField.setText(encrypt);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Требуется ключ.\n" + instruction, "Ошибка", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEncryptActionPerformed
    private void btnServerStartActionPerformed(java.awt.event.ActionEvent evt) {
        cryptServer = new CryptServer(Integer.parseInt(serverPortField.getText()));
        new Thread(cryptServer).start();
        serverPortField.setEditable(false);
        btnServerStart.setEnabled(false);
    }

//this method is called when Decrypt button is clicked
    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        try {
            String cryptType = (String) jComboBox2.getSelectedItem();
            String tempText = encryptedTextField.getText();
            String decrypt = Crypto.decrypt(cryptType, tempText, keyField.getText());
            decryptedTextField.setText(decrypt);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Нужен ключ.\n", "No Key", JOptionPane.ERROR_MESSAGE);
        } catch (BadPaddingException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Неправильный ключ.\n", "No Key", JOptionPane.ERROR_MESSAGE);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidAlgorithmParameterException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed
    //this method is called when Reset button is clicked
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.reset();

    }//GEN-LAST:event_btnResetActionPerformed

    private void ipFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipFieldActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        this.reset();
        nField.setEditable(false);
        kField.setEditable(false);
        lField.setEditable(false);
        serverPortField.setEditable(false);
        ipField.setEditable(false);
        portField.setEditable(false);
        btnStart.setEnabled(false);
        btnServerStart.setEnabled(false);
        btnReset.setEnabled(false);
        btnConnect.setEnabled(false);
        btnDisConnect.setEnabled(true);

        client = new Client(ipField.getText(), Integer.parseInt(serverPortField.getText()));
        new Thread(client).start();
        serverPortField.setEditable(false);
        btnServerStart.setEnabled(false);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisConnectActionPerformed
        this.reset();
    }//GEN-LAST:event_btnDisConnectActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed

        try {
            // TODO add your handling code here:
            String tempText = encryptedTextField.getText();
            out.writeObject(new Message((String) jComboBox1.getSelectedItem(), tempText));
            syncMessageLabel.setText("Сообщение отправлено ");
            statusLabel.setText(" ");
        } catch (IOException ex) {
            Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonSendActionPerformed

//GEN-FIRST:event_btnSyncActionPerformed
 
//GEN-LAST:event_btnSyncActionPerformed

    private void serverPortFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverPortFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverPortFieldActionPerformed

    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portFieldActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void init() {
        //if TPM are already initialized then simply return
        if (neuronMachine1 != null && !reset) {
            statusLabel.setText("Сеть уже инициализирована.");
            return;
        }

        try {
            //get the input parameters
            String n = nField.getText().trim();
            String k = kField.getText().trim();
            String l = lField.getText().trim();

            //check for validity of parameters
            if ((n.length() > 0) && (k.length() > 0) && (l.length() > 0)) {
                numberOfInputNeuron = Integer.parseInt(n);
                numberOfHiddenNeuron = Integer.parseInt(k);
                rangeOfWeight = Integer.parseInt(l);

                //initialize the two TPM
                neuronMachine1 = new TPM(numberOfInputNeuron, numberOfHiddenNeuron, rangeOfWeight);

                //set random initial weights
                neuronMachine1.randomize();

                //initialixe the Input vector and generate random vector
                inputVector = new InputVector();
                inputVector.setRandom(numberOfHiddenNeuron, numberOfInputNeuron);

                //disable the input parameters fields
                nField.setEditable(false);
                kField.setEditable(false);
                lField.setEditable(false);

                //initialize the weight tables. Table to display the weight of TPM
                weightTable1 = new JTable(new WeightTable(numberOfHiddenNeuron, numberOfInputNeuron));
                //set the size for weight table
                weightTable1.setPreferredScrollableViewportSize(new Dimension(numberOfHiddenNeuron * 20, numberOfInputNeuron * 20));
                //cover all available space
                weightTable1.setFillsViewportHeight(true);
                //set the weight table elements
                for (int ii = 0; ii < numberOfHiddenNeuron; ii++) {
                    for (int jj = 0; jj < numberOfInputNeuron; jj++) {
                        weightTable1.setValueAt(neuronMachine1.getWeight(ii * numberOfInputNeuron + jj), ii, jj);
                    }
                }

                //Create the scroll pane and add the weightTable1 to it.
                scrollPane1 = new JScrollPane(weightTable1);
                //clear the jpanels
                jPanel1.removeAll();
                //Add the scroll pane to this panel.
                jPanel1.add(scrollPane1);
                //update the gui
                jPanel1.updateUI();
                jPanel1.show(true);

                //set the status 
                reset = false;
                statusLabel.setText("Сеть создана.");
                this.setVisible(true);
            }
        } catch (NumberFormatException e) {
            //display the exception on message box
            JOptionPane.showMessageDialog(this, e.getMessage(), "Ошибка в параметрах", JOptionPane.ERROR_MESSAGE);
        }
        this.update(this.getGraphics());
    }

    public void initClient() {

        try {
            //get the input parameters
            String n = nField.getText().trim();
            String k = kField.getText().trim();
            String l = lField.getText().trim();

            //check for validity of parameters
            if ((n.length() > 0) && (k.length() > 0) && (l.length() > 0)) {
                numberOfInputNeuron = Integer.parseInt(n);
                numberOfHiddenNeuron = Integer.parseInt(k);
                rangeOfWeight = Integer.parseInt(l);

                //initialize the two TPM
                neuronMachine1 = new TPM(numberOfInputNeuron, numberOfHiddenNeuron, rangeOfWeight);

                //set random initial weights
                neuronMachine1.randomize();

                //initialixe the Input vector and generate random vector
                inputVector = new InputVector();
                inputVector.setRandom(numberOfHiddenNeuron, numberOfInputNeuron);

                //disable the input parameters fields
                nField.setEditable(false);
                kField.setEditable(false);
                lField.setEditable(false);

                //initialize the weight tables. Table to display the weight of TPM
                weightTable1 = new JTable(new WeightTable(numberOfHiddenNeuron, numberOfInputNeuron));
                //set the size for weight table
                weightTable1.setPreferredScrollableViewportSize(new Dimension(numberOfHiddenNeuron * 20, numberOfInputNeuron * 20));
                //cover all available space
                weightTable1.setFillsViewportHeight(true);
                //set the weight table elements
                for (int ii = 0; ii < numberOfHiddenNeuron; ii++) {
                    for (int jj = 0; jj < numberOfInputNeuron; jj++) {
                        weightTable1.setValueAt(neuronMachine1.getWeight(ii * numberOfInputNeuron + jj), ii, jj);
                    }
                }

                //Create the scroll pane and add the weightTable1 to it.
                scrollPane1 = new JScrollPane(weightTable1);
                //clear the jpanels
                jPanel1.removeAll();
                //Add the scroll pane to this panel.
                jPanel1.add(scrollPane1);
                //update the gui
                jPanel1.updateUI();
                jPanel1.show(true);

                //set the status 
                reset = false;
                statusLabel.setText("Сеть создана.");
                this.setVisible(true);
            }
        } catch (NumberFormatException e) {
            //display the exception on message box
            JOptionPane.showMessageDialog(this, e.getMessage(), "Ошибка в параметрах", JOptionPane.ERROR_MESSAGE);
        }
        this.update(this.getGraphics());
    }

    public void reset() {
        //reset tree parity machine
        neuronMachine1 = null;
        if ((cryptServer != null) && (serverRunningFlag || !serverCanBeStarted)) {
            cryptServer.serverStop();
        }
        if ((client != null) && (clientRunningFlag || !clientCanBeStarted)) {
            client.clientStop();
        }

        //clear the panels to show tree parity machine images 
        jPanel1.removeAll();
        jPanel1.add(tpmImage1);

        //set button and input parameters field enabled
        nField.setEditable(true);
        kField.setEditable(true);
        lField.setEditable(true);
        serverPortField.setEditable(true);
        ipField.setEditable(true);
        portField.setEditable(true);
        btnReset.setEnabled(true);
        btnStart.setEnabled(true);
        btnServerStart.setEnabled(false);
        btnConnect.setEnabled(true);
        jButtonSend.setEnabled(false);
        btnDisConnect.setEnabled(false);

        //reset the text areas and text fields
        keyField.setText("");
        plainTextField.setText("");
        encryptedTextField.setText("");
        decryptedTextField.setText("");
        statusLabel.setText("Введите значения и нажмите Создать сеть.");
        syncMessageLabel.setText("");

        //reset progress bar
        syncBar.setValue(0);

        //update the gui
        jPanel1.updateUI();
        jPanel1.show(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnDisConnect;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnServerStart;
    private javax.swing.JButton btnStart;
    private javax.swing.JTextArea decryptedTextField;
    private javax.swing.JTextArea encryptedTextField;
    private javax.swing.JTextField ipField;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTree jTree1;
    private javax.swing.JFormattedTextField kField;
    private javax.swing.JTextField keyField;
    private javax.swing.JFormattedTextField lField;
    private javax.swing.JFormattedTextField nField;
    private javax.swing.JTextArea plainTextField;
    private javax.swing.JFormattedTextField portField;
    private javax.swing.JFormattedTextField serverPortField;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JProgressBar syncBar;
    private javax.swing.JLabel syncMessageLabel;
    // End of variables declaration//GEN-END:variables
    /*manually added field variable starts*/
    private int numberOfInputNeuron, numberOfHiddenNeuron, rangeOfWeight;
    private TPM neuronMachine1, neuronMachine2;
    private InputVector inputVector;
    private boolean reset = true;
    private CryptServer cryptServer = null;
    private Client client = null;
    private boolean serverRunningFlag = false;
    private boolean clientRunningFlag = false;
    private boolean serverCanBeStarted = true;
    private boolean clientCanBeStarted = true;
    private JTable weightTable1;
    private JTable weightTable2;
    private JScrollPane scrollPane1;
    private JLabel tpmImage1;
    private ObjectInputStream in = null;
    private ObjectOutputStream out = null;
    private int SERVERDELAY = 200;
    private String instruction = "Нажмите Создать сеть, чтобы начать";

    /* manually added field variables ends*/
    // Server 
    class CryptServer implements Runnable {

        private int serverPort = 8080;
        protected ServerSocket serverSocket = null;
        private Socket socket = null;

        public CryptServer(int port) {
            serverCanBeStarted = false;
            this.serverPort = port;
            syncMessageLabel.setText("");
            statusLabel.setText("Сервер инциализирован");
            try {
                serverSocket = new ServerSocket(serverPort);
            } catch (IOException e) {
                System.err.println("Server Socket exception");
                serverStop();
                syncMessageLabel.setText("Ошибка");
                statusLabel.setText("Сервер остановлен");
            }

        }

        public final void serverStop() {
            statusLabel.setText("Сервер остановлен");
            syncMessageLabel.setText("");
            try {
                serverRunningFlag = false;
                serverCanBeStarted = true;
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
                if (socket != null) {
                    socket.close();
                }
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            serverRunningFlag = true;
            statusLabel.setText("Сервер запущен");

            try {
                socket = serverSocket.accept();
            } catch (IOException ex) {
                System.err.println("Server Socket exception");
                serverStop();
            }

            try {
                out = new ObjectOutputStream(socket.getOutputStream());
                in = new ObjectInputStream(socket.getInputStream());
            } catch (IOException e) {
                System.err.println("ObjectStream exception");
                serverStop();
            }
            try {
                syncMessageLabel.setText("Синхронизация...");
                statusLabel.setText("Соединение установлено");
                out.writeObject(new MessageConfig(numberOfInputNeuron, numberOfHiddenNeuron, rangeOfWeight));

                int maxIterations = (int) (rangeOfWeight * rangeOfWeight * rangeOfWeight * rangeOfWeight * numberOfInputNeuron * numberOfHiddenNeuron);
                MessageOutput messageOutput;
                int neuronMachine2output;

                for (int i = 0; i < maxIterations; i++) {
                    if (!serverRunningFlag) {
                        serverStop();
                        return;
                    }
                    //randomize the input vector
                    inputVector.setRandom(numberOfHiddenNeuron, numberOfInputNeuron);
                    out.writeObject(new MessageInputVector(inputVector.getData()));
                    //calculate the output of both TPMs
                    neuronMachine1.calcOutput(inputVector.getData());
                    messageOutput = (MessageOutput) in.readObject();
                    neuronMachine2output = messageOutput.getOutput();

                    //if the output match the only update weights
                    if (neuronMachine1.getOutput() == neuronMachine2output) {
                        neuronMachine1.updateWeight(inputVector.getData());
                        out.writeObject(new MessageUpdateWeightsAndSynchronizationCheck(Crypto.sha256HashSalted(neuronMachine1.getWeight())));
                        //periodically update thw weight tables
                        if (i % 10 == 0) {
                            for (int ii = 0; ii < numberOfHiddenNeuron; ii++) {
                                for (int jj = 0; jj < numberOfInputNeuron; jj++) {
                                    weightTable1.setValueAt(neuronMachine1.getWeight(ii * numberOfInputNeuron + jj), ii, jj);
                                }
                            }
                        }
                        MessageSynchronizationCheckReady s;
                        if (((MessageSynchronizationCheckReady) in.readObject()).isReady()) {
                            //set the key field
                            keyField.setText(Key.get32BitKey(neuronMachine1.makeKey()));
                            //set sync status
                            syncMessageLabel.setText(" Синхонизировано за " + i + " итераций.");
                            statusLabel.setText("Синхонизация завершена");
                            //sync complete, return true
                            jButtonSend.setEnabled(true);
                            syncBar.setValue(100);
                            break;
                        }

//                        update the gui
                        jPanel1.updateUI();
                        jPanel1.show(true);
                    }
                }
                while (serverRunningFlag) {
                    Message message = (Message) in.readObject();
                    if (message != null) {
                        encryptedTextField.setText(message.getText());
                        jComboBox2.setSelectedItem(message.getCryptType());
                        statusLabel.setText("Получено зашифрованное сообщение");
                    }
                    try {
                        Thread.sleep(SERVERDELAY);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                serverStop();
            } catch (IOException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                serverStop();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                serverStop();
            }
        }

    }

    //Client
    class Client implements Runnable {

        private int hostPort = 8080;
        private String host = "";
        private Socket socket = null;
        private Message tempMessage = null;

        public Client(String host, int port) {
            clientCanBeStarted = false;
            this.host = host;
            this.hostPort = port;
        }

        public final void clientStop() {
            statusLabel.setText("Соединение разорвано");
            try {
                clientRunningFlag = false;
                clientCanBeStarted = true;
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
                if (socket != null) {
                    socket.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            clientRunningFlag = true;
            statusLabel.setText("Соединение...");
            try {
                socket = new Socket(host, hostPort);
            } catch (IOException ex) {
                System.err.println("Server Socket exception");
                syncMessageLabel.setText("Не удалось установить соединение.");
                statusLabel.setText("Ошибка");
                clientStop();
            }

            try {
                in = new ObjectInputStream(socket.getInputStream());
                out = new ObjectOutputStream(socket.getOutputStream());
            } catch (IOException e) {
                System.err.println("ObjectStream exception");
                clientStop();
            }
            try {
                syncMessageLabel.setText("Синхронизация...");
                statusLabel.setText("Соединение установлено");
                tempMessage = (MessageConfig) in.readObject();
                nField.setText(Integer.toString(((MessageConfig) tempMessage).getNumberOfInputNeuron()));
                kField.setText(Integer.toString(((MessageConfig) tempMessage).getNumberOfHiddenNeuron()));
                lField.setText(Integer.toString(((MessageConfig) tempMessage).getRangeOfWeight()));
                init();
                int i = 0;

                while (true) {
                    if (!clientRunningFlag) {
                        clientStop();
                        return;
                    }
                    tempMessage = null;

                    tempMessage = (Message) in.readObject();
                    if (tempMessage instanceof MessageInputVector) {
                        //get the input vector
                        inputVector.setData(((MessageInputVector) tempMessage).getData());

                        //calculate the output of both TPMs and sent to server
                        neuronMachine1.calcOutput(inputVector.getData());
                        out.writeObject(new MessageOutput(neuronMachine1.getOutput()));
                    } else if (tempMessage instanceof MessageUpdateWeightsAndSynchronizationCheck) {
                        //if the output match the only update weights
                        neuronMachine1.updateWeight(inputVector.getData());
                        i++;
                        if (Crypto.sha256EqualCheck(neuronMachine1.getWeight(), ((MessageUpdateWeightsAndSynchronizationCheck) tempMessage).getHash())) {

                            out.writeObject(new MessageSynchronizationCheckReady(true));
                            //set the key field
                            keyField.setText(Key.get32BitKey(neuronMachine1.makeKey()));
                            //set sync status
                            syncMessageLabel.setText(" Синхронизировано за " + i + " итераций.");
                            statusLabel.setText("Синхронизация завершена");
                            //sync complete, return true
                            jButtonSend.setEnabled(true);
                            syncBar.setValue(100);
                            break;
                        } else {
                            out.writeObject(new MessageSynchronizationCheckReady(false));
                        }
                    }
                    if (i % 10 == 0) {
                        for (int ii = 0; ii < numberOfHiddenNeuron; ii++) {
                            for (int jj = 0; jj < numberOfInputNeuron; jj++) {
                                weightTable1.setValueAt(neuronMachine1.getWeight(ii * numberOfInputNeuron + jj), ii, jj);
                            }
                        }
                    }
                    //update the gui
                    jPanel1.updateUI();
                    jPanel1.show(true);
                }
            } catch (IOException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (clientRunningFlag) {
                    Message message = (Message) in.readObject();
                    if (message != null) {
                        encryptedTextField.setText(message.getText());
                        jComboBox2.setSelectedItem(message.getCryptType());
                        statusLabel.setText("Получено зашифрованное сообщение");
                    }
                    try {
                        Thread.sleep(SERVERDELAY);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                clientStop();
            } catch (IOException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                clientStop();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NCryptPanel.class.getName()).log(Level.SEVERE, null, ex);
                clientStop();
            }
        }

    }
}
